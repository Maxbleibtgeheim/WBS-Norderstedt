/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoDisplaystyleInlineMathPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// main.ts
var AutoDisplaystyleInlineMathPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await (0, import_obsidian.loadMathJax)();
    this.install();
    this.rerender();
    this.addCommand({
      id: "enable",
      name: "Enable",
      checkCallback: (checking) => {
        if (!this.uninstaller) {
          if (!checking) {
            this.install();
            this.rerender();
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "disable",
      name: "Disable",
      checkCallback: (checking) => {
        if (this.uninstaller) {
          if (!checking) {
            this.uninstaller();
            this.uninstaller = null;
            this.rerender();
          }
          return true;
        }
        return false;
      }
    });
  }
  onunload() {
    var _a;
    (_a = this.uninstaller) == null ? void 0 : _a.call(this);
    this.rerender();
  }
  install() {
    this.register(this.uninstaller = around(MathJax, {
      tex2chtml(old) {
        return function(source, options) {
          if (options.display === false)
            source = "\\displaystyle " + source;
          return old(source, options);
        };
      }
    }));
  }
  async rerender() {
    for (const leaf of this.app.workspace.getLeavesOfType("markdown")) {
      const view = leaf.view;
      const state = view.getState();
      const eState = view.getEphemeralState();
      view.previewMode.rerender(true);
      const editor = view.editor;
      editor.setValue(editor.getValue());
      if (state.mode === "preview") {
        state.mode = "source";
        await view.setState(state, { history: false });
        state.mode = "preview";
        await view.setState(state, { history: false });
      }
      view.setEphemeralState(eState);
    }
  }
};
